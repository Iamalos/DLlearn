# AUTOGENERATED! DO NOT EDIT! File to edit: GPT_dev0.ipynb.

# %% auto 0
__all__ = ['batch_size', 'block_size', 'max_iters', 'eval_interval', 'lr', 'device', 'eval_iters', 'n_embd', 'f', 'text', 'chars',
           'vocab_size', 'stoi', 'itos', 'encode', 'decode', 'data', 'n', 'train_data', 'val_data', 'model',
           'optimizer', 'context', 'get_batch', 'BigramLanguageModel', 'estimate_loss']

# %% GPT_dev0.ipynb 2
from httpx import get as hget
import torch
import torch.nn as nn
from torch.nn import functional as F
torch.set_printoptions(linewidth=150)

# %% GPT_dev0.ipynb 4
batch_size = 32 # how many independent sequences will be processed in parallel
block_size = 8 # maximum context length for predictions
max_iters = 3_000
eval_interval = 300
lr = 1e-2
device = 'cuda' if torch.cuda.is_available() else 'cpu'
eval_iters = 200
n_embd = 32

torch.manual_seed(1337);

# %% GPT_dev0.ipynb 6
f = hget("https://raw.githubusercontent.com/karpathy/ng-video-lecture/refs/heads/master/input.txt")
text = f.text

# %% GPT_dev0.ipynb 10
chars = sorted(list(set(text)))
vocab_size = len(chars)

# %% GPT_dev0.ipynb 13
stoi = {ch:i for i,ch in enumerate(chars)}
itos = {i:ch for ch, i in stoi.items()}
encode = lambda s: [stoi[c] for c in s] # encoder: take a string and output a list of integers
decode = lambda l: ''.join((itos[o] for o in l) )# decoder: take a list of integers and output a string

# %% GPT_dev0.ipynb 16
data = torch.tensor(encode(text), dtype=torch.long)

# %% GPT_dev0.ipynb 19
n = int(0.9*len(data)) # first 90% will be train, rest val
train_data = data[:n]
val_data = data[n:]

# %% GPT_dev0.ipynb 25
def get_batch(split):
    # generate a small batch of data of inputs x and targets y
    data = train_data if split == "train" else val_data
    ix = torch.randint(0, len(data)-block_size, (batch_size,)) # random offsets
    x = torch.stack([data[i:i+block_size] for i in ix])
    y = torch.stack([data[i+1:i+block_size+1] for i in ix])
    x,y = x.to(device), y.to(device)
    return x, y

# %% GPT_dev0.ipynb 31
class BigramLanguageModel(nn.Module):

    def __init__(self):
        super().__init__()
        # each token directly reads off the logits for the next token from a lookup table
        self.token_embedding_table = nn.Embedding(vocab_size, vocab_size)

    def forward(self, idx, targets=None):

        # idx and targets are both (B, T) tensor of integers
        logits = self.token_embedding_table(idx) # (B, T, C)

        if targets is None:
            loss = None
        else:
            # we reshape logits to pass it to F.cross_entropy as it expects (B,C,T)
            B, T, C = logits.shape
            logits = logits.view(B*T, C)
            target = targets.view(B*T)
            loss = F.cross_entropy(logits, target)

        return logits, loss

    def generate(self, idx, max_new_tokens):
        # idx is (B, T) array of indices in the current context
        for _ in range(max_new_tokens):
            # get the predictions
            logits, _ = self(idx)
            # focus only on the last time step T (in forward pass logits retain original shape (no .view))
            logits = logits[:,-1,:] # becomes (B, C)
            # apply softmax to get probabilities
            probs = F.softmax(logits, dim=-1) # (B, C)
            # sample from the distribution
            idx_next = torch.multinomial(probs, num_samples=1) # (B, 1)
            # append sampled index to the running sequence
            idx = torch.cat((idx, idx_next), dim=1) # (B, T+1)
            # print(idx.shape)
        return idx

model = BigramLanguageModel().to(device)

# %% GPT_dev0.ipynb 37
@torch.no_grad()
def estimate_loss():
    out = {}
    model.eval()
    for split in ['train', 'val']:
        losses = torch.zeros(eval_iters)
        for k in range(eval_iters):
            X, Y = get_batch(split)
            logits, loss = model(X, Y)
            losses[k] = loss.item()
        out[split] = losses.mean()
    model.train()
    return out

# %% GPT_dev0.ipynb 39
optimizer = torch.optim.AdamW(model.parameters(), lr=lr)

# %% GPT_dev0.ipynb 41
for iter in range(max_iters):
   
    # evaluate loss on train and val sets once in a while
    if iter % eval_interval == 0:
        losses = estimate_loss()
        print(f"step {iter}: train loss {losses['train']:.4f}, val loss {losses['val']:.4f}")

    # sample a batch of data
    xb, yb = get_batch('train')

    # evaluate the loss
    logits, loss = model(xb, yb)
    optimizer.zero_grad(set_to_none=True)
    loss.backward()
    optimizer.step()

# %% GPT_dev0.ipynb 42
context = torch.zeros((1, 1), dtype=torch.long, device=device)
print(decode(model.generate(context, max_new_tokens=300)[0].tolist()))
